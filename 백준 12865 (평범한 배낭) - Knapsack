# 이차원 배열 사용
import sys

N, K = map(int, sys.stdin.readline().split())
weight, value = [], []
for i in range(N):
    W, V = map(int, sys.stdin.readline().split())
    weight.append(W)
    value.append(V)

# dp[i][j] : i번째 물건을 넣고, 넣을 수 있는 배낭의 남은 공간 j
dp = [[0 for i in range(K+1)] for j in range(N+1)]
for i in range(1, N+1):
    for j in range(1, K+1):
        if (j - weight[i-1]) >= 0:
            dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i-1]] + value[i-1])

        else:
            dp[i][j] = dp[i-1][j]

print(dp[N][K])



# 일차원 배열 사용
import sys

N, K = map(int, sys.stdin.readline().split())
weight, value = [], []
for i in range(N):
    W, V = map(int, sys.stdin.readline().split())
    weight.append(W)
    value.append(V)

# dp[i] : 배낭의 남은 공간 j 일 때, 최대 가치
dp = [0 for i in range(K+1)]
for i in range(1, N+1):
    # 끝에서
    for j in range(K, 0, -1):
        if (j - weight[i-1]) >= 0:
            dp[j] = max(dp[j], dp[j-weight[i-1]] + value[i-1])

print(dp[K])
